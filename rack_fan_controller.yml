esphome:
  name: rack_fan_controller
  platform: esp32
  board: lolin32

# Enable Wifi
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Enable MQTT
mqtt:
  broker: !secret mqtt_broker
  client_id: 'rack_fan_controller'
  discovery: false
  reboot_timeout: 10s

# Enable logging
logger:

# Enable OTA
ota:

dallas:
  - pin: GPIO18
    update_interval: 5s

# Hardware PWM output for controlling fan speed
# Frequency is fixed at 25 KHz, per Intel specifications
# All fans are controlled by a single PWM signal
# If you want to control each fan independantly, just add corresponding outputs
output:
  - platform: ledc
    pin: GPIO13
    frequency: 25000 Hz
    id: fan_output
    
sensor:
# Dallas temperature sensors declaration
  - platform: dallas
    address: 0xF48000001EA0AF28
    name: "Temperature Base Rack"
    id: temp_base_rack
    accuracy_decimals: 1

  - platform: dallas
    address: 0x408000001E87D828
    name: "Temperature Top Rack"
    id: temp_top_rack
    accuracy_decimals: 1
    on_value:
      then:
        - script.execute: fan_regulation

# Tachometers declaration for each fan
# Useful to detect malfunctioning fans
  - platform: pulse_counter
    pin: GPIO12
    name: "Front Left Fan Tachometer"
    id: fan_fl_tacho
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    unit_of_measurement: "tr/min"
    accuracy_decimals: 0
    filters:
      - multiply: 0.5
    update_interval: 10s

  - platform: pulse_counter
    pin: GPIO14
    name: "Front Middle Fan Tachometer"
    id: fan_fm_tacho
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    unit_of_measurement: "tr/min"
    accuracy_decimals: 0
    filters:
      - multiply: 0.5
    update_interval: 10s

  - platform: pulse_counter
    pin: GPIO27
    name: "Front Right Fan Tachometer"
    id: fan_fr_tacho
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    unit_of_measurement: "tr/min"
    accuracy_decimals: 0
    filters:
      - multiply: 0.5
    update_interval: 10s

  - platform: pulse_counter
    pin: GPIO26
    name: "Rear Left Fan Tachometer"
    id: fan_rl_tacho
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    unit_of_measurement: "tr/min"
    accuracy_decimals: 0
    filters:
      - multiply: 0.5
    update_interval: 10s

  - platform: pulse_counter
    pin: GPIO25
    name: "Rear Middle Fan Tachometer"
    id: fan_rm_tacho
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    unit_of_measurement: "tr/min"
    accuracy_decimals: 0
    filters:
      - multiply: 0.5
    update_interval: 10s

  - platform: pulse_counter
    pin: GPIO33
    name: "Rear Right Fan Tachometer"
    id: fan_rr_tacho
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    unit_of_measurement: "tr/min"
    accuracy_decimals: 0
    filters:
      - multiply: 0.5
    update_interval: 10s

# Fan declaration with speed values
fan:
  - platform: speed
    output: fan_output
    name: "Ventilation rack"
    id: fan_speed
    speed:
      low: 0.35
      medium: 0.5
      high: 1

script:
  - id: fan_regulation
    then:
      - lambda: |-
          // Set the hysteresis margin
          const float margin = 0.25;

          // Set the number of fan speed levels
          const int num_fan_speed_levels = 3;

          // Set the values of fan speed levels
          const esphome::fan::FanSpeed fan_speed_levels[num_fan_speed_levels] = { FAN_SPEED_LOW,
                                                                                  FAN_SPEED_MEDIUM,
                                                                                  FAN_SPEED_HIGH };

          // Fan speed output level; retained for next calculation
          static esphome::fan::FanSpeed fan_speed_output = FAN_SPEED_MEDIUM;

          // Set the number of mean temperature ranges
          const int num_temp_mean_ranges = 3;

          // Set the values of mean temperature ranges
          const float temp_mean_ranges[num_temp_mean_ranges] = { 0, 22, 26 };

          // Last mean temperature range; retained for next calculation
          static int last_temp_mean = 0;

          // Current mean temperature of the rack
          float current_temp_mean = ( id(temp_base_rack).state + id(temp_top_rack).state ) / 2;

          // Current top temperature of the rack
          float current_temp_top = id(temp_top_rack).state;

          // Set lower and upper bounds for last mean temperature range
          float mean_lb = temp_mean_ranges[last_temp_mean];
          float mean_ub = 0;
          if ( last_temp_mean > 0 ) {
            mean_lb -= margin;
          }
          if ( last_temp_mean + 1 > num_temp_mean_ranges - 1 ) {
            mean_ub = temp_mean_ranges[num_temp_mean_ranges - 1] + margin;
          } else {
            mean_ub = temp_mean_ranges[last_temp_mean + 1] + margin;
          }

          // Set lower bound for high temperature limit
          float top_lb = 27 - margin;

          // Boolean to help with high temperature mode
          // High temperature mode is triggered when top temperature is > 27 °C, independently of
          // mean temperature value
          static bool temp_is_high = false;

          // Start of regulation code
          //
          // First detect if we are in high temperature mode
          // Then quit this mode if top temperature is < to lower bound
          //
          // If we're not in high temperature mode, trigger it if top temperature is > 27 °C
          //
          // If top temperature is < 27 °C, regulate fan speed with mean temperature :
          //
          // < 22 °C    ==> FAN_SPEED_LOW
          // 22 - 22 °C ==> FAN_SPEED_MEDIUM
          // > 26 °C    ==> FAN_SPEED_HIGH
          if ( temp_is_high ) {
            if ( current_temp_top < top_lb ) {
            temp_is_high = false;
            }
          } else {
            if ( current_temp_top >= 27 ) {
              temp_is_high = true;
              fan_speed_output = FAN_SPEED_HIGH;
            }
            if ( current_temp_mean < mean_lb || current_temp_mean > mean_ub ) {
              if ( current_temp_mean > temp_mean_ranges[num_temp_mean_ranges - 1] ) {
                fan_speed_output = FAN_SPEED_HIGH;
              } else {
                int i;
                for ( i = 0; i < num_temp_mean_ranges; i++ ) {
                  if ( current_temp_mean >= temp_mean_ranges[i] && current_temp_mean < temp_mean_ranges[i + 1] ) {
                    break;
                  }
                }
                last_temp_mean = temp_mean_ranges[i];
                fan_speed_output = fan_speed_levels[i];
              }
            }
          }

          // Set fan speed
          id(fan_speed).turn_on().set_speed(fan_speed_output).perform();